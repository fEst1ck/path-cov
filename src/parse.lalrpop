use crate::gen_cfg::{BlockEntry, CFG};
use crate::file_format::{BlockID as BlockID, FunID};
use std::str::FromStr;

grammar;

pub CFGs: Vec<CFG<BlockID, FunID>> = FunctionEntry*;

FunctionEntry: CFG<BlockID, FunID> =
	"Function" ":" <id: FunID> <block_entries: BlockEntry*> => CFG {
		id: id.to_string(),
		block_entries
	};

BlockEntry: BlockEntry<BlockID, FunID> =
	<basic_block_entry: BasicBlockEntry> <suc_entry: SuccessorsEntry> => {
		BlockEntry {
			id: basic_block_entry.0,
			calls: basic_block_entry.1,
			successors: suc_entry
		}
	};

BasicBlockEntry: (BlockID, Option<FunID>) =
	"BasicBlock" ":" <BlockID> <CallEntry?>;

CallEntry: FunID = "calls" <fun_id: FunID> => fun_id.to_string();

SuccessorsEntry: Vec<BlockID> =
	"Successors" ":" <BlockID*>;

BlockID: BlockID = r"[0-9]+" => usize::from_str(<>).unwrap();

FunID = r"[a-zA-Z_][a-zA-Z0-9_]*";
